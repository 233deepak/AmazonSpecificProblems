package com.deepak.dp.inter;

import static org.junit.Assert.*;

import org.junit.Test;

public class DungeonPrincessTest {

	@Test
	public void base_case() throws Exception {

		DungeonPrincess dungeonPrincess = new DungeonPrincess();
		int[][] matrix = { { -2, -3, 3 }, { -5, -10, 1 }, { 10, 30, -5 } };
		int minPath = dungeonPrincess.calculateMinimumHP(ArrayHelper
				.getList(matrix));

		assertEquals(7, minPath);
	}

	@Test
	public void base_case1() throws Exception {

		DungeonPrincess dungeonPrincess = new DungeonPrincess();
		int[][] matrix = {
				{ -71, -63, -86, -48, -56, -73, -20, -37, -86, -99, 6, -29,
						-61, -35, -86, -91, -90, -52, -53, -2 },
				{ -56, -94, -21, -63, -42, -81, -65, -29, -61, 2, -36, -89, -2,
						-42, -15, -43, -100, -29, -17, 8 },
				{ -34, -39, -3, -76, -28, -33, 3, -58, -26, -49, -52, -88, -98,
						-96, -65, -95, -81, -10, -43, -11 },
				{ -33, -72, 6, -50, -25, -30, -49, -29, -1, -30, -97, -34, -4,
						-81, -95, -78, -64, -17, -14, 8 },
				{ -19, -95, -46, -38, -26, -5, -93, 5, -41, -77, -29, -89, -10,
						-52, -42, -69, -95, -85, -77, -44 },
				{ -14, -91, -63, -58, 2, -70, -63, -27, -60, -50, -16, -38,
						-16, -6, -66, 3, -45, -83, -100, -91 },
				{ -100, -39, -53, -35, -20, -43, -19, 5, -73, -22, 2, 2, -64,
						-44, -88, -26, 1, -62, -14, -11 },
				{ -27, -94, -56, -15, -84, -88, -34, 10, -41, -13, -51, -13,
						-63, -72, -12, -5, -6, -28, -52, -5 },
				{ -96, -21, -30, -67, -18, -62, -94, -6, -61, 5, -5, -55, -8,
						-25, -34, -49, -39, -19, -15, -67 },
				{ -26, -32, -43, -13, -57, -11, -38, -41, -42, -57, -30, -63,
						-26, -43, -17, -32, -48, -45, -62, -37 },
				{ -81, -79, 7, -62, -22, -46, -36, -100, -24, -6, -28, -31,
						-81, -5, -84, -67, -24, 10, -52, -19 },
				{ -11, -64, -90, -82, -73, -26, -33, -6, 0, -24, -96, 6, -81,
						-10, -79, -72, -72, -17, 2, -90 },
				{ -65, -62, -36, -26, -41, -12, -82, -52, -87, -2, -43, -90,
						-50, 3, -20, -90, -51, 5, -28, -77 },
				{ -8, -75, -32, -36, -83, -82, -77, 6, -29, 8, -67, -26, -100,
						-41, -36, -83, -12, -63, -79, -93 },
				{ -53, 5, -50, -69, -20, -41, -72, -64, -37, 7, -51, -15, -74,
						-81, -58, -49, 3, -27, -46, -17 },
				{ -74, -44, -65, -24, -66, -98, 3, -35, -67, -92, -47, -73,
						-44, -49, 8, -57, -11, 5, -69, -40 },
				{ -29, -79, -67, -71, -29, -54, -86, -87, -6, -76, 3, 3, -14,
						-93, -86, -95, -95, -52, -15, -9 },
				{ -87, -86, -32, 4, -21, -67, 10, -90, -55, -64, -39, -2, -42,
						-51, -51, 9, -27, -83, -79, 5 },
				{ -85, -73, -51, -60, -85, -84, -65, -49, 4, -30, -19, -23,
						-68, -99, -18, -99, -52, -10, -87, 5 },
				{ -69, -4, -8, -69, -44, -33, -62, -27, -41, -68, -26, -80,
						-50, -53, -52, -39, -86, -23, -25, -9 } };
		int minPath = dungeonPrincess.calculateMinimumHP(ArrayHelper
				.getList(matrix));

		assertEquals(791, minPath);
	}

}
